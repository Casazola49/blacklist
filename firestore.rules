rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/usuarios/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data.tipo == 'admin';
    }
    
    function isClient() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/usuarios/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data.tipo == 'cliente';
    }
    
    function isSpecialist() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/usuarios/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data.tipo == 'especialista';
    }
    
    function isActiveUser() {
      return isAuthenticated() && 
             exists(/databases/$(database)/documents/usuarios/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/usuarios/$(request.auth.uid)).data.estado == 'activo';
    }

    // Users collection
    match /usuarios/{userId} {
      // Users can read their own profile, admins can read all
      allow read: if isOwner(userId) || isAdmin();
      
      // Users can create their own profile during registration
      allow create: if isOwner(userId) && 
                       request.resource.data.uid == request.auth.uid &&
                       request.resource.data.email == request.auth.token.email;
      
      // Users can update their own profile (except critical fields), admins can update any
      allow update: if (isOwner(userId) && 
                        !('tipo' in request.resource.data.diff(resource.data).affectedKeys()) &&
                        !('estado' in request.resource.data.diff(resource.data).affectedKeys()) &&
                        !('uid' in request.resource.data.diff(resource.data).affectedKeys())) ||
                       isAdmin();
      
      // Only admins can delete users
      allow delete: if isAdmin();
    }

    // Contracts collection
    match /contratos/{contractId} {
      // Clients can read their own contracts, specialists can read assigned contracts, admins can read all
      allow read: if isActiveUser() && 
                     (resource.data.clienteId == request.auth.uid ||
                      resource.data.especialistaId == request.auth.uid ||
                      isAdmin());
      
      // Only active clients can create contracts
      allow create: if isClient() && isActiveUser() &&
                       request.resource.data.clienteId == request.auth.uid &&
                       request.resource.data.estado == 'abierto';
      
      // Clients can update their own contracts, specialists can update assigned contracts, admins can update any
      allow update: if isActiveUser() && 
                       (resource.data.clienteId == request.auth.uid ||
                        resource.data.especialistaId == request.auth.uid ||
                        isAdmin());
      
      // Only admins can delete contracts
      allow delete: if isAdmin();
    }

    // Proposals collection
    match /propuestas/{proposalId} {
      // Specialists can read their own proposals, clients can read proposals for their contracts, admins can read all
      allow read: if isActiveUser() && 
                     (resource.data.especialistaId == request.auth.uid ||
                      exists(/databases/$(database)/documents/contratos/$(resource.data.contratoId)) &&
                      get(/databases/$(database)/documents/contratos/$(resource.data.contratoId)).data.clienteId == request.auth.uid ||
                      isAdmin());
      
      // Only active specialists can create proposals
      allow create: if isSpecialist() && isActiveUser() &&
                       request.resource.data.especialistaId == request.auth.uid &&
                       request.resource.data.estado == 'pendiente';
      
      // Specialists can update their own proposals, clients can update proposals for their contracts (to accept/reject)
      allow update: if isActiveUser() && 
                       (resource.data.especialistaId == request.auth.uid ||
                        (exists(/databases/$(database)/documents/contratos/$(resource.data.contratoId)) &&
                         get(/databases/$(database)/documents/contratos/$(resource.data.contratoId)).data.clienteId == request.auth.uid) ||
                        isAdmin());
      
      // Specialists can delete their own proposals, admins can delete any
      allow delete: if (resource.data.especialistaId == request.auth.uid) || isAdmin();
    }

    // Escrow transactions collection
    match /transacciones/{transactionId} {
      // Only involved parties and admins can read transactions
      allow read: if isActiveUser() && 
                     (resource.data.clienteId == request.auth.uid ||
                      resource.data.especialistaId == request.auth.uid ||
                      isAdmin());
      
      // Only system (via Cloud Functions) should create transactions
      allow create: if false; // Handled by Cloud Functions
      
      // Only admins and system can update transactions
      allow update: if isAdmin();
      
      // Only admins can delete transactions
      allow delete: if isAdmin();
    }

    // QR payments collection
    match /pagos_qr/{paymentId} {
      // Only the client who created the payment can read it
      allow read: if isActiveUser() && 
                     exists(/databases/$(database)/documents/contratos/$(resource.data.contratoId)) &&
                     get(/databases/$(database)/documents/contratos/$(resource.data.contratoId)).data.clienteId == request.auth.uid;
      
      // Only system (via Cloud Functions) should create QR payments
      allow create: if false; // Handled by Cloud Functions
      
      // Only system can update QR payments
      allow update: if false; // Handled by Cloud Functions
      
      // Only admins can delete QR payments
      allow delete: if isAdmin();
    }

    // Chat collection
    match /chats/{chatId} {
      // Only participants can read chats
      allow read: if isActiveUser() && 
                     request.auth.uid in resource.data.participantes;
      
      // Participants can create chats for contracts they're involved in
      allow create: if isActiveUser() && 
                       request.auth.uid in request.resource.data.participantes &&
                       exists(/databases/$(database)/documents/contratos/$(request.resource.data.contratoId)) &&
                       (get(/databases/$(database)/documents/contratos/$(request.resource.data.contratoId)).data.clienteId == request.auth.uid ||
                        get(/databases/$(database)/documents/contratos/$(request.resource.data.contratoId)).data.especialistaId == request.auth.uid);
      
      // Participants can update chat metadata
      allow update: if isActiveUser() && 
                       request.auth.uid in resource.data.participantes;
      
      // Only admins can delete chats
      allow delete: if isAdmin();
    }

    // Messages collection
    match /mensajes/{messageId} {
      // Only chat participants can read messages
      allow read: if isActiveUser() && 
                     exists(/databases/$(database)/documents/chats/$(resource.data.chatId)) &&
                     request.auth.uid in get(/databases/$(database)/documents/chats/$(resource.data.chatId)).data.participantes;
      
      // Only chat participants can create messages
      allow create: if isActiveUser() && 
                       request.resource.data.autorId == request.auth.uid &&
                       exists(/databases/$(database)/documents/chats/$(request.resource.data.chatId)) &&
                       request.auth.uid in get(/databases/$(database)/documents/chats/$(request.resource.data.chatId)).data.participantes;
      
      // Only message author can update their messages
      allow update: if isActiveUser() && 
                       resource.data.autorId == request.auth.uid;
      
      // Only message author and admins can delete messages
      allow delete: if (resource.data.autorId == request.auth.uid) || isAdmin();
    }

    // Ratings collection
    match /calificaciones/{ratingId} {
      // Users can read visible ratings for any user, and their own ratings (visible or not)
      allow read: if isAuthenticated() && 
                     (resource.data.visible == true ||
                      resource.data.evaluadorId == request.auth.uid ||
                      resource.data.evaluadoId == request.auth.uid ||
                      isAdmin());
      
      // Only users involved in a completed contract can create ratings
      allow create: if isActiveUser() && 
                       request.resource.data.evaluadorId == request.auth.uid &&
                       exists(/databases/$(database)/documents/contratos/$(request.resource.data.contratoId)) &&
                       (get(/databases/$(database)/documents/contratos/$(request.resource.data.contratoId)).data.clienteId == request.auth.uid ||
                        get(/databases/$(database)/documents/contratos/$(request.resource.data.contratoId)).data.especialistaId == request.auth.uid) &&
                       get(/databases/$(database)/documents/contratos/$(request.resource.data.contratoId)).data.estado == 'completado';
      
      // Only the rating author can update their rating (before it becomes visible)
      allow update: if isActiveUser() && 
                       resource.data.evaluadorId == request.auth.uid &&
                       resource.data.visible == false;
      
      // Only admins can delete ratings
      allow delete: if isAdmin();
    }

    // Chat audit logs collection
    match /chat_audit_logs/{logId} {
      // System can create audit logs
      allow create: if true;
      
      // Only admins can read audit logs
      allow read: if isAdmin();
      
      // No updates or deletes allowed
      allow update, delete: if false;
    }

    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}